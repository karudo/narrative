(function() {
    this.App = {
        modules: {}
    };
    this.require = function(t) {
        return this.App.modules[t.toLowerCase()];
    };
}).call(this);

(function() {
    var t = {}, e = App.modules;
    t.exports = null;
    (function() {
        var e, i, r, n, s, o, a, l, u, c, d, p, h = [].slice, g = [].indexOf || function(t) {
            for (var e = 0, i = this.length; e < i; e++) {
                if (e in this && this[e] === t) return e;
            }
            return -1;
        }, f = {}.hasOwnProperty, m = function(t, e) {
            for (var i in e) {
                if (f.call(e, i)) t[i] = e[i];
            }
            function r() {
                this.constructor = t;
            }
            r.prototype = e.prototype;
            t.prototype = new r();
            t.__super__ = e.prototype;
            return t;
        }, v = function(t, e) {
            return function() {
                return t.apply(e, arguments);
            };
        };
        r = {
            bind: function(t, e) {
                var i, r, n, s, o;
                r = t.split(" ");
                i = this.hasOwnProperty("_callbacks") && this._callbacks || (this._callbacks = {});
                for (s = 0, o = r.length; s < o; s++) {
                    n = r[s];
                    i[n] || (i[n] = []);
                    i[n].push(e);
                }
                return this;
            },
            one: function(t, e) {
                return this.bind(t, function() {
                    this.unbind(t, arguments.callee);
                    return e.apply(this, arguments);
                });
            },
            trigger: function() {
                var t, e, i, r, n, s, o;
                t = 1 <= arguments.length ? h.call(arguments, 0) : [];
                i = t.shift();
                r = this.hasOwnProperty("_callbacks") && ((o = this._callbacks) != null ? o[i] : void 0);
                if (!r) {
                    return;
                }
                for (n = 0, s = r.length; n < s; n++) {
                    e = r[n];
                    if (e.apply(this, t) === false) {
                        break;
                    }
                }
                return true;
            },
            unbind: function(t, e) {
                var i, r, n, s, o, a;
                if (!t) {
                    this._callbacks = {};
                    return this;
                }
                n = (a = this._callbacks) != null ? a[t] : void 0;
                if (!n) {
                    return this;
                }
                if (!e) {
                    delete this._callbacks[t];
                    return this;
                }
                for (r = s = 0, o = n.length; s < o; r = ++s) {
                    i = n[r];
                    if (!(i === e)) {
                        continue;
                    }
                    n = n.slice();
                    n.splice(r, 1);
                    this._callbacks[t] = n;
                    break;
                }
                return this;
            }
        };
        n = {
            trace: true,
            logPrefix: "(App)",
            log: function() {
                var t;
                t = 1 <= arguments.length ? h.call(arguments, 0) : [];
                if (!this.trace) {
                    return;
                }
                if (this.logPrefix) {
                    t.unshift(this.logPrefix);
                }
                if (typeof console !== "undefined" && console !== null) {
                    if (typeof console.log === "function") {
                        console.log.apply(console, t);
                    }
                }
                return this;
            }
        };
        p = [ "included", "extended" ];
        o = function() {
            t.include = function(t) {
                var e, i, r;
                if (!t) {
                    throw new Error("include(obj) requires obj");
                }
                for (e in t) {
                    i = t[e];
                    if (g.call(p, e) < 0) {
                        this.prototype[e] = i;
                    }
                }
                if ((r = t.included) != null) {
                    r.apply(this);
                }
                return this;
            };
            t.extend = function(t) {
                var e, i, r;
                if (!t) {
                    throw new Error("extend(obj) requires obj");
                }
                for (e in t) {
                    i = t[e];
                    if (g.call(p, e) < 0) {
                        this[e] = i;
                    }
                }
                if ((r = t.extended) != null) {
                    r.apply(this);
                }
                return this;
            };
            t.proxy = function(t) {
                var e = this;
                return function() {
                    return t.apply(e, arguments);
                };
            };
            t.prototype.proxy = function(t) {
                var e = this;
                return function() {
                    return t.apply(e, arguments);
                };
            };
            function t() {
                if (typeof this.init === "function") {
                    this.init.apply(this, arguments);
                }
            }
            return t;
        }();
        s = function(t) {
            m(i, t);
            i.extend(r);
            i.records = {};
            i.crecords = {};
            i.attributes = [];
            i.configure = function() {
                var t, e;
                e = arguments[0], t = 2 <= arguments.length ? h.call(arguments, 1) : [];
                this.className = e;
                this.records = {};
                this.crecords = {};
                if (t.length) {
                    this.attributes = t;
                }
                this.attributes && (this.attributes = d(this.attributes));
                this.attributes || (this.attributes = []);
                this.unbind();
                return this;
            };
            i.toString = function() {
                return "" + this.className + "(" + this.attributes.join(", ") + ")";
            };
            i.find = function(t) {
                var e;
                e = this.records[t];
                if (!e && ("" + t).match(/c-\d+/)) {
                    return this.findCID(t);
                }
                if (!e) {
                    throw new Error("Unknown record");
                }
                return e.clone();
            };
            i.findCID = function(t) {
                var e;
                e = this.crecords[t];
                if (!e) {
                    throw new Error("Unknown record");
                }
                return e.clone();
            };
            i.exists = function(t) {
                try {
                    return this.find(t);
                } catch (e) {
                    return false;
                }
            };
            i.refresh = function(t, e) {
                var i, r, n, s;
                if (e == null) {
                    e = {};
                }
                if (e.clear) {
                    this.records = {};
                    this.crecords = {};
                }
                r = this.fromJSON(t);
                if (!u(r)) {
                    r = [ r ];
                }
                for (n = 0, s = r.length; n < s; n++) {
                    i = r[n];
                    i.id || (i.id = i.cid);
                    this.records[i.id] = i;
                    this.crecords[i.cid] = i;
                }
                this.trigger("refresh", this.cloneArray(r));
                return this;
            };
            i.select = function(t) {
                var e, i, r;
                r = function() {
                    var r, n;
                    r = this.records;
                    n = [];
                    for (e in r) {
                        i = r[e];
                        if (t(i)) {
                            n.push(i);
                        }
                    }
                    return n;
                }.call(this);
                return this.cloneArray(r);
            };
            i.findByAttribute = function(t, e) {
                var i, r, n;
                n = this.records;
                for (i in n) {
                    r = n[i];
                    if (r[t] === e) {
                        return r.clone();
                    }
                }
                return null;
            };
            i.findAllByAttribute = function(t, e) {
                return this.select(function(i) {
                    return i[t] === e;
                });
            };
            i.each = function(t) {
                var e, i, r, n;
                r = this.records;
                n = [];
                for (e in r) {
                    i = r[e];
                    n.push(t(i.clone()));
                }
                return n;
            };
            i.all = function() {
                return this.cloneArray(this.recordsValues());
            };
            i.first = function() {
                var t;
                t = this.recordsValues()[0];
                return t != null ? t.clone() : void 0;
            };
            i.last = function() {
                var t, e;
                e = this.recordsValues();
                t = e[e.length - 1];
                return t != null ? t.clone() : void 0;
            };
            i.count = function() {
                return this.recordsValues().length;
            };
            i.deleteAll = function() {
                var t, e, i, r;
                i = this.records;
                r = [];
                for (t in i) {
                    e = i[t];
                    r.push(delete this.records[t]);
                }
                return r;
            };
            i.destroyAll = function() {
                var t, e, i, r;
                i = this.records;
                r = [];
                for (t in i) {
                    e = i[t];
                    r.push(this.records[t].destroy());
                }
                return r;
            };
            i.update = function(t, e, i) {
                return this.find(t).updateAttributes(e, i);
            };
            i.create = function(t, e) {
                var i;
                i = new this(t);
                return i.save(e);
            };
            i.destroy = function(t, e) {
                return this.find(t).destroy(e);
            };
            i.change = function(t) {
                if (typeof t === "function") {
                    return this.bind("change", t);
                } else {
                    return this.trigger("change", t);
                }
            };
            i.fetch = function(t) {
                if (typeof t === "function") {
                    return this.bind("fetch", t);
                } else {
                    return this.trigger("fetch", t);
                }
            };
            i.toJSON = function() {
                return this.recordsValues();
            };
            i.fromJSON = function(t) {
                var e, i, r, n;
                if (!t) {
                    return;
                }
                if (typeof t === "string") {
                    t = JSON.parse(t);
                }
                if (u(t)) {
                    n = [];
                    for (i = 0, r = t.length; i < r; i++) {
                        e = t[i];
                        n.push(new this(e));
                    }
                    return n;
                } else {
                    return new this(t);
                }
            };
            i.fromForm = function() {
                var t;
                return (t = new this()).fromForm.apply(t, arguments);
            };
            i.recordsValues = function() {
                var t, e, i, r;
                e = [];
                r = this.records;
                for (t in r) {
                    i = r[t];
                    e.push(i);
                }
                return e;
            };
            i.cloneArray = function(t) {
                var e, i, r, n;
                n = [];
                for (i = 0, r = t.length; i < r; i++) {
                    e = t[i];
                    n.push(e.clone());
                }
                return n;
            };
            i.idCounter = 0;
            i.uid = function(t) {
                var e;
                if (t == null) {
                    t = "";
                }
                e = t + this.idCounter++;
                if (this.exists(e)) {
                    e = this.uid(t);
                }
                return e;
            };
            function i(t) {
                i.__super__.constructor.apply(this, arguments);
                if (t) {
                    this.load(t);
                }
                this.cid = this.constructor.uid("c-");
            }
            i.prototype.isNew = function() {
                return !this.exists();
            };
            i.prototype.isValid = function() {
                return !this.validate();
            };
            i.prototype.validate = function() {};
            i.prototype.load = function(t) {
                var e, i;
                for (e in t) {
                    i = t[e];
                    if (typeof this[e] === "function") {
                        this[e](i);
                    } else {
                        this[e] = i;
                    }
                }
                return this;
            };
            i.prototype.attributes = function() {
                var t, e, i, r, n;
                e = {};
                n = this.constructor.attributes;
                for (i = 0, r = n.length; i < r; i++) {
                    t = n[i];
                    if (t in this) {
                        if (typeof this[t] === "function") {
                            e[t] = this[t]();
                        } else {
                            e[t] = this[t];
                        }
                    }
                }
                if (this.id) {
                    e.id = this.id;
                }
                return e;
            };
            i.prototype.eql = function(t) {
                return !!(t && t.constructor === this.constructor && t.cid === this.cid || t.id && t.id === this.id);
            };
            i.prototype.save = function(t) {
                var e, i;
                if (t == null) {
                    t = {};
                }
                if (t.validate !== false) {
                    e = this.validate();
                    if (e) {
                        this.trigger("error", e);
                        return false;
                    }
                }
                this.trigger("beforeSave", t);
                i = this.isNew() ? this.create(t) : this.update(t);
                this.trigger("save", t);
                return i;
            };
            i.prototype.updateAttribute = function(t, e, i) {
                this[t] = e;
                return this.save(i);
            };
            i.prototype.updateAttributes = function(t, e) {
                this.load(t);
                return this.save(e);
            };
            i.prototype.changeID = function(t) {
                var e;
                e = this.constructor.records;
                e[t] = e[this.id];
                delete e[this.id];
                this.id = t;
                return this.save();
            };
            i.prototype.destroy = function(t) {
                if (t == null) {
                    t = {};
                }
                this.trigger("beforeDestroy", t);
                delete this.constructor.records[this.id];
                delete this.constructor.crecords[this.cid];
                this.destroyed = true;
                this.trigger("destroy", t);
                this.trigger("change", "destroy", t);
                this.unbind();
                return this;
            };
            i.prototype.dup = function(t) {
                var e;
                e = new this.constructor(this.attributes());
                if (t === false) {
                    e.cid = this.cid;
                } else {
                    delete e.id;
                }
                return e;
            };
            i.prototype.clone = function() {
                return l(this);
            };
            i.prototype.reload = function() {
                var t;
                if (this.isNew()) {
                    return this;
                }
                t = this.constructor.find(this.id);
                this.load(t.attributes());
                return t;
            };
            i.prototype.toJSON = function() {
                return this.attributes();
            };
            i.prototype.toString = function() {
                return "<" + this.constructor.className + " (" + JSON.stringify(this) + ")>";
            };
            i.prototype.fromForm = function(t) {
                var i, r, n, s, o;
                r = {};
                o = e(t).serializeArray();
                for (n = 0, s = o.length; n < s; n++) {
                    i = o[n];
                    r[i.name] = i.value;
                }
                return this.load(r);
            };
            i.prototype.exists = function() {
                return this.id && this.id in this.constructor.records;
            };
            i.prototype.update = function(t) {
                var e, i;
                this.trigger("beforeUpdate", t);
                i = this.constructor.records;
                i[this.id].load(this.attributes());
                e = i[this.id].clone();
                e.trigger("update", t);
                e.trigger("change", "update", t);
                return e;
            };
            i.prototype.create = function(t) {
                var e, i;
                this.trigger("beforeCreate", t);
                if (!this.id) {
                    this.id = this.cid;
                }
                i = this.dup(false);
                this.constructor.records[this.id] = i;
                this.constructor.crecords[this.cid] = i;
                e = i.clone();
                e.trigger("create", t);
                e.trigger("change", "create", t);
                return e;
            };
            i.prototype.bind = function(t, e) {
                var i, r, n = this;
                this.constructor.bind(t, i = function(t) {
                    if (t && n.eql(t)) {
                        return e.apply(n, arguments);
                    }
                });
                this.constructor.bind("unbind", r = function(e) {
                    if (e && n.eql(e)) {
                        n.constructor.unbind(t, i);
                        return n.constructor.unbind("unbind", r);
                    }
                });
                return i;
            };
            i.prototype.one = function(t, e) {
                var i, r = this;
                return i = this.bind(t, function() {
                    r.constructor.unbind(t, i);
                    return e.apply(r, arguments);
                });
            };
            i.prototype.trigger = function() {
                var t, e;
                t = 1 <= arguments.length ? h.call(arguments, 0) : [];
                t.splice(1, 0, this);
                return (e = this.constructor).trigger.apply(e, t);
            };
            i.prototype.unbind = function() {
                return this.trigger("unbind");
            };
            return i;
        }(o);
        i = function(t) {
            m(i, t);
            i.include(r);
            i.include(n);
            i.prototype.eventSplitter = /^(\S+)\s*(.*)$/;
            i.prototype.tag = "div";
            function i(t) {
                this.release = v(this.release, this);
                var r, n, s;
                this.options = t;
                s = this.options;
                for (r in s) {
                    n = s[r];
                    this[r] = n;
                }
                if (!this.el) {
                    this.el = document.createElement(this.tag);
                }
                this.el = e(this.el);
                this.$el = this.el;
                if (this.className) {
                    this.el.addClass(this.className);
                }
                if (this.attributes) {
                    this.el.attr(this.attributes);
                }
                if (!this.events) {
                    this.events = this.constructor.events;
                }
                if (!this.elements) {
                    this.elements = this.constructor.elements;
                }
                if (this.events) {
                    this.delegateEvents(this.events);
                }
                if (this.elements) {
                    this.refreshElements();
                }
                i.__super__.constructor.apply(this, arguments);
            }
            i.prototype.release = function() {
                this.trigger("release");
                this.el.remove();
                return this.unbind();
            };
            i.prototype.$ = function(t) {
                return e(t, this.el);
            };
            i.prototype.delegateEvents = function(t) {
                var e, i, r, n, s, o, a = this;
                o = [];
                for (i in t) {
                    n = t[i];
                    if (typeof n === "function") {
                        n = function(t) {
                            return function() {
                                t.apply(a, arguments);
                                return true;
                            };
                        }(n);
                    } else {
                        if (!this[n]) {
                            throw new Error("" + n + " doesn't exist");
                        }
                        n = function(t) {
                            return function() {
                                a[t].apply(a, arguments);
                                return true;
                            };
                        }(n);
                    }
                    r = i.match(this.eventSplitter);
                    e = r[1];
                    s = r[2];
                    if (s === "") {
                        o.push(this.el.bind(e, n));
                    } else {
                        o.push(this.el.delegate(s, e, n));
                    }
                }
                return o;
            };
            i.prototype.refreshElements = function() {
                var t, e, i, r;
                i = this.elements;
                r = [];
                for (t in i) {
                    e = i[t];
                    r.push(this[e] = this.$(t));
                }
                return r;
            };
            i.prototype.delay = function(t, e) {
                return setTimeout(this.proxy(t), e || 0);
            };
            i.prototype.html = function(t) {
                this.el.html(t.el || t);
                this.refreshElements();
                return this.el;
            };
            i.prototype.append = function() {
                var t, e, i;
                e = 1 <= arguments.length ? h.call(arguments, 0) : [];
                e = function() {
                    var i, r, n;
                    n = [];
                    for (i = 0, r = e.length; i < r; i++) {
                        t = e[i];
                        n.push(t.el || t);
                    }
                    return n;
                }();
                (i = this.el).append.apply(i, e);
                this.refreshElements();
                return this.el;
            };
            i.prototype.appendTo = function(t) {
                this.el.appendTo(t.el || t);
                this.refreshElements();
                return this.el;
            };
            i.prototype.prepend = function() {
                var t, e, i;
                e = 1 <= arguments.length ? h.call(arguments, 0) : [];
                e = function() {
                    var i, r, n;
                    n = [];
                    for (i = 0, r = e.length; i < r; i++) {
                        t = e[i];
                        n.push(t.el || t);
                    }
                    return n;
                }();
                (i = this.el).prepend.apply(i, e);
                this.refreshElements();
                return this.el;
            };
            i.prototype.replace = function(t) {
                var i, r;
                r = [ this.el, e(t.el || t) ], i = r[0], this.el = r[1];
                i.replaceWith(this.el);
                this.delegateEvents(this.events);
                this.refreshElements();
                return this.el;
            };
            return i;
        }(o);
        e = (typeof window !== "undefined" && window !== null ? window.jQuery : void 0) || (typeof window !== "undefined" && window !== null ? window.Zepto : void 0) || function(t) {
            return t;
        };
        l = Object.create || function(t) {
            var e;
            e = function() {};
            e.prototype = t;
            return new e();
        };
        u = function(t) {
            return Object.prototype.toString.call(t) === "[object Array]";
        };
        c = function(t) {
            var e;
            if (!t) {
                return true;
            }
            for (e in t) {
                return false;
            }
            return true;
        };
        d = function(t) {
            return Array.prototype.slice.call(t, 0);
        };
        a = this.Spine = {};
        if (typeof t !== "undefined" && t !== null) {
            t.exports = a;
        }
        a.version = "1.0.8";
        a.isArray = u;
        a.isBlank = c;
        a.$ = e;
        a.Events = r;
        a.Log = n;
        a.Module = o;
        a.Controller = i;
        a.Model = s;
        o.extend.call(a, r);
        o.create = o.sub = i.create = i.sub = s.sub = function(t, e) {
            var i;
            i = function(t) {
                m(e, t);
                function e() {
                    return e.__super__.constructor.apply(this, arguments);
                }
                return e;
            }(this);
            if (t) {
                i.include(t);
            }
            if (e) {
                i.extend(e);
            }
            if (typeof i.unbind === "function") {
                i.unbind();
            }
            return i;
        };
        s.setup = function(t, e) {
            var i;
            if (e == null) {
                e = [];
            }
            i = function(t) {
                m(e, t);
                function e() {
                    return e.__super__.constructor.apply(this, arguments);
                }
                return e;
            }(this);
            i.configure.apply(i, [ t ].concat(h.call(e)));
            return i;
        };
        a.Class = o;
    }).call(this);
    e["spine"] = t.exports;
    t.exports = null;
    (function() {
        var e;
        e = {
            doSeveralTimes: function(t, e, i, r) {
                var n, s;
                if (i == null) {
                    i = 10;
                }
                if (r == null) {
                    r = 300;
                }
                s = null;
                n = function() {
                    var r;
                    r = t();
                    if (r || i < 1) {
                        clearInterval(s);
                        return typeof e === "function" ? e(!r) : void 0;
                    } else {
                        return i--;
                    }
                };
                return s = setInterval(n, r);
            },
            uniqueId: function() {
                var t;
                t = 0;
                return function(e) {
                    if (e == null) {
                        e = "uniq";
                    }
                    return e + t++;
                };
            }()
        };
        t.exports = e;
    }).call(this);
    e["utils"] = t.exports;
    t.exports = null;
    (function() {
        var e, i, r = {}.hasOwnProperty, n = function(t, e) {
            for (var i in e) {
                if (r.call(e, i)) t[i] = e[i];
            }
            function n() {
                this.constructor = t;
            }
            n.prototype = e.prototype;
            t.prototype = new n();
            t.__super__ = e.prototype;
            return t;
        };
        i = require("utils").doSeveralTimes;
        e = function(t) {
            n(e, t);
            e.prototype.editMode = true;
            e.prototype.hasImage = false;
            e.prototype.savedSliderValue = 0;
            e.prototype.savedImageTop = 0;
            e.prototype.savedImageLeft = 0;
            e.prototype.fisrtUpload = true;
            e.prototype.noManage = true;
            e.prototype.elements = {
                img: "image",
                ".imageDrag": "dragdiv",
                ".manag-block": "managBlock",
                ".image-upload_file": "uploadFile"
            };
            e.prototype.events = {
                "click .manag-block .image-save": "clickSave",
                "click .manag-block .image-cancel": "clickCancel",
                "click .manag-block .image-remove": "makeEmpty",
                "click .manag-block .image-move": function() {
                    this.createManagSliderBlock();
                    return this.setEditMode(true);
                },
                "click .image-upload__icon": function() {
                    if (!this.editMode) {
                        return;
                    }
                    return this.uploadFile.click();
                },
                "change .image-upload_file": "userSelectFile",
                drop: "drop",
                dragover: function(t) {
                    if (!this.editMode) {
                        return;
                    }
                    t.preventDefault();
                    if (this.dragUploadedImage) {
                        return this.cursorInArea = true;
                    } else {
                        return this.setDragOver();
                    }
                },
                dragleave: function(t) {
                    if (!this.editMode) {
                        return;
                    }
                    t.preventDefault();
                    if (this.dragUploadedImage) {
                        return this.cursorInArea = false;
                    } else {
                        return this.setDragLeave();
                    }
                },
                "dragstart .imageDrag": "dragstart",
                "dragend .imageDrag": function() {
                    if (!this.editMode) {
                        return;
                    }
                    return this.dragUploadedImage = false;
                },
                "drag .imageDrag": "drag"
            };
            function e() {
                e.__super__.constructor.apply(this, arguments);
            }
            e.prototype.init = function() {
                return this.makeEmpty();
            };
            e.prototype.makeEmpty = function() {
                this.savedSliderValue = 0;
                this.savedImageTop = 0;
                this.savedImageLeft = 0;
                this.removeManagBlock();
                this.html('<div class="image-upload__in">\n<div class="image-upload__icon"></div>\n<input type="file" class="image-upload_file" accept="image/*">\n<div class="image-upload__text">Click or drug’n’drop to upload header image</div>\n</div>');
                this.editMode = true;
                return this.hasImage = false;
            };
            e.prototype.makeDragImage = function(t) {
                var e, r, n = this;
                r = new Image();
                r.src = t;
                this.imgOrigWidth = this.imgOrigHeight = 0;
                this.$el.empty();
                e = $('<div class="imageDrag"></div>');
                e.html(r);
                return i(function() {
                    if (r.height > 0 || r.width > 0) {
                        n.imgOrigWidth = r.width;
                        n.imgOrigHeight = r.height;
                        e.append('<div class="topOfImage"></div>');
                        e.find(".topOfImage").css({
                            width: n.imgOrigWidth + "px",
                            height: n.imgOrigHeight + "px"
                        });
                        return true;
                    } else {
                        return false;
                    }
                }, function() {
                    n.imageSrc = t;
                    n.html(e);
                    n.createManagSliderBlock();
                    n.setEditMode(true);
                    n.hasImage = true;
                    n.trigger("imageUpdated", n.fisrtUpload);
                    if (n.fisrtUpload) {
                        return n.fisrtUpload = false;
                    }
                });
            };
            e.prototype.readImageFile = function(t) {
                var e, i = this;
                if (t) {
                    e = new FileReader();
                    e.onload = function(t) {
                        return i.makeDragImage(t.target.result);
                    };
                    return e.readAsDataURL(t);
                }
            };
            e.prototype.createManagBlock = function(t) {
                if (t == null) {
                    t = true;
                }
                if (t) {
                    this.removeManagBlock();
                }
                return $('<div class="manag-block"></div>');
            };
            e.prototype.removeManagBlock = function() {
                if (this.slider) {
                    this.slider.release();
                }
                return this.managBlock.remove();
            };
            e.prototype.createManagSliderBlock = function() {
                var t, e, i = this;
                e = this.createManagBlock().html('<div class="image-manag"></div>\n<div class="image-manag image-cancel">Cancel</div>\n<div class="image-manag image-save">Save</div>');
                t = require("controllers/UISlider");
                this.slider = new t({
                    el: e.find(".image-manag").first()
                });
                this.slider.bind("value", function(t) {
                    var e;
                    if (!i.imgOrigHeight) {
                        i.imgOrigHeight = i.image.height();
                    }
                    e = i.imgOrigHeight / i.slider.maxValue * t;
                    if (e) {
                        return i.image.css({
                            height: e + "px"
                        });
                    }
                });
                this.slider.setValue(this.savedSliderValue);
                return this.append(e);
            };
            e.prototype.createManagEditBlock = function() {
                var t;
                t = this.createManagBlock().html('<div class="image-manag">\n  <div><span class="image-remove"></span></div>\n  <div><span class="image-move"></span></div>\n</div>');
                return this.append(t);
            };
            e.prototype.setDragOver = function() {
                if (!this.$el.hasClass("dragover")) {
                    return this.$el.addClass("dragover");
                }
            };
            e.prototype.setDragLeave = function() {
                return this.$el.removeClass("dragover");
            };
            e.prototype.setEditMode = function(t) {
                this.editMode = !!t;
                if (this.editMode) {
                    this.$(".imageDrag").addClass("edit").attr("draggable", "true");
                    this.createManagSliderBlock();
                } else {
                    this.$(".imageDrag").removeClass("edit").attr("draggable", "false");
                    this.removeManagBlock();
                }
                return this.trigger("editmode", this.editMode);
            };
            e.prototype.userSelectFile = function() {
                var t;
                if (this.uploadFile[0]) {
                    return this.readImageFile(typeof (t = this.uploadFile.get(0).files).item === "function" ? t.item(0) : void 0);
                }
            };
            e.prototype.dragstart = function(t) {
                var e, i;
                if (!this.editMode) {
                    return;
                }
                i = t.originalEvent;
                e = i.dataTransfer;
                if (!this.dragImage) {
                    this.dragImage = document.createElement("span");
                }
                e.setData("Text", "");
                if (e.setDragImage) {
                    e.setDragImage(this.dragImage, 1, 1);
                }
                this.startDragX = i.pageX;
                this.startDragY = i.pageY;
                this.startPositionCoords = this.dragdiv.position();
                return this.dragUploadedImage = true;
            };
            e.prototype.drag = function(t) {
                if (!this.editMode) {
                    return;
                }
                t.preventDefault();
                if (this.cursorInArea) {
                    return this.dragdiv.css({
                        left: this.startPositionCoords.left + (t.originalEvent.pageX - this.startDragX) + "px",
                        top: this.startPositionCoords.top + (t.originalEvent.pageY - this.startDragY) + "px"
                    });
                }
            };
            e.prototype.drop = function(t) {
                var e;
                if (!this.editMode) {
                    return;
                }
                t.preventDefault();
                this.readImageFile((e = t.originalEvent.dataTransfer) != null ? e.files[0] : void 0);
                return this.setDragLeave();
            };
            e.prototype.clickSave = function() {
                var t;
                this.savedSliderValue = this.slider.getValue();
                t = this.dragdiv.position();
                this.savedImageTop = t.top;
                this.savedImageLeft = t.left;
                this.setEditMode(false);
                if (this.noManage) {
                    this.removeManagBlock();
                } else {
                    this.createManagEditBlock();
                }
                return this.trigger("save");
            };
            e.prototype.clickCancel = function() {
                var t;
                if (this.hasImage) {
                    if ((t = this.slider) != null) {
                        if (typeof t.setValue === "function") {
                            t.setValue(this.savedSliderValue);
                        }
                    }
                    this.dragdiv.css({
                        left: this.savedImageLeft,
                        top: this.savedImageTop
                    });
                    if (this.noManage) {
                        this.removeManagBlock();
                    } else {
                        this.createManagEditBlock();
                    }
                } else {
                    this.makeEmpty();
                }
                this.setEditMode(false);
                return this.trigger("cancel");
            };
            return e;
        }(Spine.Controller);
        t.exports = e;
    }).call(this);
    e["controllers/dragimage"] = t.exports;
    t.exports = null;
    (function() {
        var e, i, r, n, s, o = {}.hasOwnProperty, a = function(t, e) {
            for (var i in e) {
                if (o.call(e, i)) t[i] = e[i];
            }
            function r() {
                this.constructor = t;
            }
            r.prototype = e.prototype;
            t.prototype = new r();
            t.__super__ = e.prototype;
            return t;
        }, l = [].slice;
        s = require("utils").uniqueId;
        n = {
            image_single: {
                idPrefix: "image_single",
                tpl: '<div id="##id##"></div>',
                controller: "controllers/FigureSingleImage"
            },
            image_12: {
                idPrefix: "image_12",
                tpl: '<figure id="##id##"></figure>',
                controller: "controllers/Figure12Image"
            },
            image_slider: {
                idPrefix: "image_slider",
                tpl: '<div id="##id##"></div>',
                controller: "controllers/FigureSlider"
            },
            image_11: {
                idPrefix: "image_11",
                tpl: '<figure id="##id##"></figure>',
                controller: "controllers/Figure11Image"
            },
            image_31: {
                idPrefix: "image_31",
                tpl: '<figure id="##id##"></figure>',
                controller: "controllers/Figure31Image"
            }
        };
        r = {
            bold: {
                cmd: "bold"
            },
            italic: {
                cmd: "italic"
            },
            listnum: {
                cmd: "insertOrderedList"
            },
            list: {
                cmd: "insertUnorderedList"
            }
        };
        i = function(t) {
            return this.onChange(t);
        };
        e = function(t) {
            a(e, t);
            e.prototype.events = {
                keyup: i,
                paste: i,
                click: i
            };
            function e() {
                var t = this;
                e.__super__.constructor.apply(this, arguments);
                this.figures = {};
                this.panel.bind("execCommand", function() {
                    var e;
                    e = 1 <= arguments.length ? l.call(arguments, 0) : [];
                    return t.execCommand.apply(t, e);
                });
                this.panel.bind("insertFigure", function(e) {
                    return t.insertFigure(n[e]);
                });
            }
            e.prototype.execCommand = function(t, e) {
                var i, n, o;
                this.restoreCursorPositon();
                switch (t) {
                  case "h2":
                    o = s("h2_compose__pretext");
                    n = document.createElement("div");
                    n.id = o;
                    n.className = "compose__pretext";
                    this.range.surroundContents(n);
                    return this.$("#" + o).css({
                        width: "640px",
                        margin: "auto"
                    });

                  case "link":
                    return document.execCommand("createLink", false, e);

                  default:
                    if (i = r[t]) {
                        return document.execCommand(i.cmd, false, e || i.params || null);
                    }
                }
            };
            e.prototype.insertFigure = function(t) {
                var e, i, r;
                this.restoreCursorPositon();
                i = s(t.idPrefix);
                r = this.range.createContextualFragment("<div>" + t.tpl.replace("##id##", i) + "</div><div>&nbsp;</div>");
                this.range.insertNode(r);
                e = require(t.controller);
                return this.figures[i] = new e({
                    el: this.$("#" + i)
                });
            };
            e.prototype.onChange = function(t) {
                var e;
                if ($(t.srcElement).parents(".no-edit").length < 1) {
                    e = window.getSelection();
                    return this.range = e.getRangeAt(0);
                }
            };
            e.prototype.restoreCursorPositon = function() {
                var t;
                this.el.focus();
                if (!this.range) {
                    this.range = document.createRange();
                    this.range.selectNodeContents(this.el.get(0));
                    this.range.collapse(false);
                }
                t = window.getSelection();
                t.removeAllRanges();
                return t.addRange(this.range);
            };
            return e;
        }(Spine.Controller);
        t.exports = e;
    }).call(this);
    e["controllers/editor"] = t.exports;
    t.exports = null;
    (function() {
        var e, i = {}.hasOwnProperty, r = function(t, e) {
            for (var r in e) {
                if (i.call(e, r)) t[r] = e[r];
            }
            function n() {
                this.constructor = t;
            }
            n.prototype = e.prototype;
            t.prototype = new n();
            t.__super__ = e.prototype;
            return t;
        };
        e = function(t) {
            r(e, t);
            function e() {
                this.dragImages = {};
                if (!this.elements[".manag-block-figure"]) {
                    this.elements[".manag-block-figure"] = "managBlock";
                }
                e.__super__.constructor.apply(this, arguments);
            }
            e.prototype.getDragImagesSrc = function() {
                var t, e, i, r;
                i = this.dragImages;
                r = [];
                for (t in i) {
                    e = i[t];
                    if (e.imageSrc) {
                        r.push(e.imageSrc);
                    }
                }
                return r;
            };
            e.prototype.setDragImagesEditMode = function(t) {
                var e, i, r;
                r = this.dragImages;
                for (e in r) {
                    i = r[e];
                    i.setEditMode(t);
                }
                return this;
            };
            e.prototype.createManagBlock = function(t) {
                if (t == null) {
                    t = true;
                }
                if (t) {
                    this.removeManagBlock();
                }
                return $('<div class="manag-block manag-block-figure"></div>');
            };
            e.prototype.removeManagBlock = function() {
                if (this.managBlock) {
                    return this.managBlock.remove();
                }
            };
            return e;
        }(Spine.Controller);
        t.exports = e;
    }).call(this);
    e["controllers/figure"] = t.exports;
    t.exports = null;
    (function() {
        var e, i, r = {}.hasOwnProperty, n = function(t, e) {
            for (var i in e) {
                if (r.call(e, i)) t[i] = e[i];
            }
            function n() {
                this.constructor = t;
            }
            n.prototype = e.prototype;
            t.prototype = new n();
            t.__super__ = e.prototype;
            return t;
        };
        e = require("controllers/Figure");
        i = function(t) {
            n(e, t);
            function e() {
                e.__super__.constructor.apply(this, arguments);
            }
            e.prototype.init = function() {
                var t;
                this.el.addClass("figure_many figure_wide no-edit").attr("contenteditable", "false");
                this.html('<div class="image-border">\n    <div class="image-upload image-container image-upload-1" style="height:550px; width:500px;"></div>\n    <div class="image-upload image-container image-upload-2" style="height:550px; width:500px;"></div>\n</div>');
                t = require("controllers/DragImage");
                this.dragImages[1] = new t({
                    el: this.$(".image-upload-1"),
                    noManage: false
                });
                return this.dragImages[2] = new t({
                    el: this.$(".image-upload-2"),
                    noManage: false
                });
            };
            return e;
        }(e);
        t.exports = i;
    }).call(this);
    e["controllers/figure11image"] = t.exports;
    t.exports = null;
    (function() {
        var e, i, r = {}.hasOwnProperty, n = function(t, e) {
            for (var i in e) {
                if (r.call(e, i)) t[i] = e[i];
            }
            function n() {
                this.constructor = t;
            }
            n.prototype = e.prototype;
            t.prototype = new n();
            t.__super__ = e.prototype;
            return t;
        };
        e = require("controllers/Figure");
        i = function(t) {
            n(e, t);
            function e() {
                e.__super__.constructor.apply(this, arguments);
            }
            e.prototype.init = function() {
                var t;
                this.el.addClass("figure_many figure_wide no-edit").attr("contenteditable", "false");
                this.html('<div class="image-border">\n<div class="image-upload image-container image-upload-1" style="height:500px; width:500px;"></div>\n<div class="image-container">\n  <div class="image-upload image-container image-upload-2" style="height:250px; width:500px;"></div>\n</div>\n<div class="image-container">\n  <div class="image-upload image-container image-upload-3" style="height:250px; width:500px;"></div>\n</div>\n</div>');
                t = require("controllers/DragImage");
                this.dragImages[1] = new t({
                    el: this.$(".image-upload-1"),
                    noManage: false
                });
                this.dragImages[2] = new t({
                    el: this.$(".image-upload-2"),
                    noManage: false
                });
                return this.dragImages[3] = new t({
                    el: this.$(".image-upload-3"),
                    noManage: false
                });
            };
            return e;
        }(e);
        t.exports = i;
    }).call(this);
    e["controllers/figure12image"] = t.exports;
    t.exports = null;
    (function() {
        var e, i, r = {}.hasOwnProperty, n = function(t, e) {
            for (var i in e) {
                if (r.call(e, i)) t[i] = e[i];
            }
            function n() {
                this.constructor = t;
            }
            n.prototype = e.prototype;
            t.prototype = new n();
            t.__super__ = e.prototype;
            return t;
        };
        e = require("controllers/Figure");
        i = function(t) {
            n(e, t);
            function e() {
                e.__super__.constructor.apply(this, arguments);
            }
            e.prototype.init = function() {
                var t;
                this.el.addClass("figure_many figure_wide no-edit").attr("contenteditable", "false");
                this.html('<div class="image-border">\n<div class="image-upload image-container image-upload-1" style="height:550px; width:334px;"></div>\n<div class="image-upload image-container image-upload-2" style="height:550px; width:333px;"></div>\n<div class="image-upload image-container image-upload-3" style="height:550px; width:333px;"></div>\n</div>');
                t = require("controllers/DragImage");
                this.dragImages[1] = new t({
                    el: this.$(".image-upload-1"),
                    noManage: false
                });
                this.dragImages[2] = new t({
                    el: this.$(".image-upload-2"),
                    noManage: false
                });
                return this.dragImages[3] = new t({
                    el: this.$(".image-upload-3"),
                    noManage: false
                });
            };
            return e;
        }(e);
        t.exports = i;
    }).call(this);
    e["controllers/figure31image"] = t.exports;
    t.exports = null;
    (function() {
        var e, i, r = {}.hasOwnProperty, n = function(t, e) {
            for (var i in e) {
                if (r.call(e, i)) t[i] = e[i];
            }
            function n() {
                this.constructor = t;
            }
            n.prototype = e.prototype;
            t.prototype = new n();
            t.__super__ = e.prototype;
            return t;
        };
        e = require("controllers/Figure");
        i = function(t) {
            n(e, t);
            function e() {
                e.__super__.constructor.apply(this, arguments);
            }
            e.prototype.init = function() {
                var t;
                this.el.addClass("no-edit").attr("contenteditable", "false");
                this.html('<div class="image-border">\n  <div class="image-upload image-container" style="height:456px; width:640px;"></div>\n</div>');
                t = require("controllers/DragImage");
                return this.dragImages[1] = new t({
                    el: this.$(".image-upload"),
                    noManage: false
                });
            };
            return e;
        }(e);
        t.exports = i;
    }).call(this);
    e["controllers/figuresingleimage"] = t.exports;
    t.exports = null;
    (function() {
        var e, i, r, n = {}.hasOwnProperty, s = function(t, e) {
            for (var i in e) {
                if (n.call(e, i)) t[i] = e[i];
            }
            function r() {
                this.constructor = t;
            }
            r.prototype = e.prototype;
            t.prototype = new r();
            t.__super__ = e.prototype;
            return t;
        };
        e = require("controllers/Figure");
        r = require("utils").uniqueId;
        i = function(t) {
            s(e, t);
            e.prototype.canAddNewSlide = false;
            e.prototype.elements = {
                ".slider__next": "nextButton",
                ".slider__prev": "prevButton",
                ".slider__slides": "slides",
                ".slider__info": "info",
                ".slider__descr": "descr",
                ".slider-builder": "builder",
                ".slider-content": "content",
                ".slider-builder .image-border .ul": "builderList"
            };
            e.prototype.events = {
                "drop .slider__slides": "drop",
                "click .manag-block-figure .image-move": function() {
                    return this.setSliderEdit(true);
                },
                "click .manag-block-figure .image-order": function() {
                    var t, e, i, n, s, o = this;
                    this.content.hide();
                    this.builderList.empty();
                    s = this.slides.find(".slider__slide");
                    e = function(t) {
                        var e, i, n, s, a, l;
                        e = $(t);
                        l = e.attr("id");
                        a = o.dragImages[l];
                        s = a.imageSrc;
                        if (!s) {
                            return;
                        }
                        i = r("li-image-m");
                        o.builderList.append('<div class="image-m li" style="width: 116px; height: 83px;" id="' + i + '" data-slide-id="' + l + '">\n<div></div>\n<span>&nbsp;</span>\n</div>');
                        n = new Image();
                        n.src = s;
                        o.$("#" + i + " div").html(n);
                        return o.$("#" + i + " div img").css({
                            width: "116px",
                            height: "83px"
                        });
                    };
                    for (i = 0, n = s.length; i < n; i++) {
                        t = s[i];
                        e(t);
                    }
                    this.builder.show();
                    this.builderList.sortable();
                    this.$(".slider-builder .image-border").append(this.createManagBlock().html('<div class="image-manag image-cancel">Cancel</div>\n<div class="image-manag image-save">Save</div>'));
                    return this.refreshElements();
                },
                "click .slider-builder .image-save": function() {
                    var t, e, i, r, n, s, o;
                    i = null;
                    o = this.builderList.find(".li");
                    for (e = n = 0, s = o.length; n < s; e = ++n) {
                        t = o[e];
                        r = $(t).data("slide-id");
                        if (e > 0) {
                            this.$("#" + i).after(this.$("#" + r));
                        } else {
                            this.slides.prepend(this.$("#" + r));
                        }
                        i = r;
                        true;
                    }
                    this.builder.hide();
                    this.content.show();
                    this.initSlider({
                        startSlideId: 0
                    });
                    return this.setSliderEdit(false);
                },
                "click .slider-builder .image-cancel": function() {
                    this.builder.hide();
                    this.content.show();
                    return this.setSliderEdit(false);
                }
            };
            function e() {
                this.slidecache = {};
                e.__super__.constructor.apply(this, arguments);
            }
            e.prototype.setSliderEdit = function(t) {
                var e;
                t = !!t;
                this.setDragImagesEditMode(t);
                if (t) {
                    this.nextButton.hide();
                    this.prevButton.hide();
                    return this.removeManagBlock();
                } else {
                    this.nextButton.show();
                    this.prevButton.show();
                    e = this.createManagBlock().html('<div class="image-manag">\n<div><span class="image-remove"></span></div>\n<div><span class="image-order"></span></div>\n<div><span class="image-move"></span></div>\n</div>\n<div class="image-manag">\n<div><span class="image-size-m"></span></div>\n<div><span class="image-size-l"></span></div>\n</div>');
                    return this.append(e);
                }
            };
            e.prototype.addSlide = function(t, e) {
                var i, n, s, o, a, l = this;
                if (e == null) {
                    e = {};
                }
                o = r("slide");
                a = $('<div class="slider__slide" id="' + o + '">\n<div class="image-upload" style="width: 1000px; height: 456px;"></div>\n</div>');
                this.slides.append(a);
                i = a.find(".image-upload");
                e.el = i;
                n = require("controllers/DragImage");
                s = this.dragImages[o] = new n(e);
                if (t) {
                    s.readImageFile(t);
                }
                s.bind("imageUpdated", function(t) {
                    if (t) {
                        return l.addSlide();
                    }
                });
                s.bind("save", function() {
                    return l.setSliderEdit(false);
                });
                s.bind("cancel", function() {
                    return l.setSliderEdit(false);
                });
                return this.initSlider();
            };
            e.prototype.initSlider = function(t) {
                var e = this;
                if (t == null) {
                    t = {};
                }
                this.slides.cycle("destroy");
                return this.slides.cycle({
                    startingSlide: t.startSlideId != null ? t.startSlideId : this.currSlideId || 0,
                    fx: "scrollHorz",
                    speed: "fast",
                    timeout: 0,
                    next: this.nextButton,
                    prev: this.prevButton,
                    after: function(t, i, r) {
                        e.descr.html(r.currSlide + 1 + " / " + r.slideCount + "");
                        return e.currSlideId = r.currSlide;
                    }
                });
            };
            e.prototype.init = function() {
                this.el.addClass("slider slider_wide no-edit").attr("contenteditable", "false");
                this.html('<div class="slider-content">\n<div class="slider__next"><span></span></div>\n<div class="slider__prev"><span></span></div>\n<div class="slider__slides"></div>\n<div class="slider__info"></div>\n<div class="slider__descr"></div>\n</div>\n\n<div class="slider-builder">\n<div class="image-border"><div class="ul"></div></div>\n</div>');
                this.builder.hide();
                this.slides.css({
                    height: "456px"
                });
                this.addSlide();
                return this.setSliderEdit(false);
            };
            e.prototype.drop = function(t) {
                var e;
                if (!this.canAddNewSlide) {
                    return;
                }
                t.preventDefault();
                return this.addSlide((e = t.originalEvent.dataTransfer) != null ? e.files[0] : void 0);
            };
            return e;
        }(e);
        t.exports = i;
    }).call(this);
    e["controllers/figureslider"] = t.exports;
    t.exports = null;
    (function() {
        var e, i, r, n = {}.hasOwnProperty, s = function(t, e) {
            for (var i in e) {
                if (n.call(e, i)) t[i] = e[i];
            }
            function r() {
                this.constructor = t;
            }
            r.prototype = e.prototype;
            t.prototype = new r();
            t.__super__ = e.prototype;
            return t;
        }, o = [].slice;
        i = {
            ".wyswyg__bold": "bold",
            ".wyswyg__italic": "italic",
            ".wyswyg__listnum": "listnum",
            ".wyswyg__list": "list",
            ".wyswyg__h2": "h2"
        };
        r = {
            ".photo_1": "image_single",
            ".photo_12": "image_12",
            ".photo_11": "image_11",
            ".photo_31": "image_31",
            ".photo_g": "image_slider"
        };
        e = function(t) {
            s(e, t);
            e.prototype.events = {
                "submit .wyswyg__link form": "insertLink"
            };
            function e() {
                var t, n, s, o = this;
                this._cloneEvents();
                for (t in i) {
                    n = i[t];
                    this.events["click " + t] = function(t) {
                        return function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            return o.execCommand(t);
                        };
                    }(n);
                }
                for (t in r) {
                    s = r[t];
                    this.events["click " + t + "_handler"] = function(t) {
                        return function(e) {
                            console.log(t);
                            e.preventDefault();
                            e.stopPropagation();
                            return o.trigger("insertFigure", t);
                        };
                    }(s);
                }
                e.__super__.constructor.apply(this, arguments);
            }
            e.prototype.execCommand = function() {
                return this.trigger.apply(this, [ "execCommand" ].concat(o.call(arguments)));
            };
            e.prototype.insertLink = function(t) {
                var e;
                t.preventDefault();
                t.stopPropagation();
                e = this.$(".wyswyg__link .input").val();
                this.execCommand("link", e);
                this.$(".wyswyg__link .wyswyg__drop").fadeOut();
                return this.$(".wyswyg__link .input").val("http://");
            };
            e.prototype._cloneEvents = function() {
                return this.events = function(t) {
                    var e, i, r;
                    r = {};
                    for (e in t) {
                        i = t[e];
                        r[e] = i;
                    }
                    return r;
                }(this.events);
            };
            return e;
        }(Spine.Controller);
        t.exports = e;
    }).call(this);
    e["controllers/panel"] = t.exports;
    t.exports = null;
    (function() {
        var e, i, r = {}.hasOwnProperty, n = function(t, e) {
            for (var i in e) {
                if (r.call(e, i)) t[i] = e[i];
            }
            function n() {
                this.constructor = t;
            }
            n.prototype = e.prototype;
            t.prototype = new n();
            t.__super__ = e.prototype;
            return t;
        };
        e = require("spine");
        i = function(t) {
            n(e, t);
            e.prototype.maxValue = 20;
            e.prototype.elements = {
                ".idslider": "slider"
            };
            e.prototype.events = {
                "click .slider-m": "clickMinus",
                "click .slider-p": "clickPlus"
            };
            function e() {
                var t = this;
                e.__super__.constructor.apply(this, arguments);
                this.html('<span class="slider-m"></span><div class="idslider"></div><span class="slider-p"></span>');
                this.slider.slider({
                    min: 1,
                    max: this.maxValue,
                    value: this.maxValue,
                    change: function() {
                        return t.trigger("value", t.slider.slider("value"));
                    }
                });
            }
            e.prototype.setValue = function(t) {
                return this.slider.slider("value", t || this.maxValue);
            };
            e.prototype.getValue = function() {
                return this.slider.slider("value");
            };
            e.prototype.clickMinus = function() {
                var t;
                t = this.slider.slider("value");
                if (t > 1) {
                    t -= 1;
                    this.slider.slider("value", t);
                    return this.trigger("value", t);
                }
            };
            e.prototype.clickPlus = function() {
                var t;
                t = this.slider.slider("value");
                if (t < this.maxValue) {
                    t += 1;
                    this.slider.slider("value", t);
                    return this.trigger("value", t);
                }
            };
            e.prototype._release = function() {
                this.slider.slider("destroy");
                return e.__super__._release.apply(this, arguments);
            };
            return e;
        }(e.Controller);
        t.exports = i;
    }).call(this);
    e["controllers/uislider"] = t.exports;
}).call(this);

(function() {
    var t, e, i, r;
    e = require("controllers/Editor");
    i = require("controllers/Panel");
    t = require("controllers/DragImage");
    r = require("utils");
    $(function() {
        var r, n, s;
        n = new i({
            el: $(".wyswyg")
        });
        s = new t({
            el: $(".image-upload"),
            noManage: false
        });
        return r = new e({
            el: $(".compose__text"),
            panel: n
        });
    });
}).call(this);